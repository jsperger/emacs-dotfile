* Projects
** Major projects
*** Create a literate config using org-mode

** Standard projects
*** Figure out Mac environment issues
pdf-tools build failed when emacs was launched from the launcher but succeeded
when emacs was launched from the command line. Forgot to copy the message but
some packages weren't available or something.

Similarly emacs says pandoc isn't installed when launched from launcher, but is
fine from command line.

*** Figure out why obsidian package isn't working


*** Figure out how to get `preview-dvisvgm` and `latex-extra` to work correctly out of the box
Fail because they rely on auctex-version (capitalization not correct), but that
variable isn't defined until auctex is launched (terminology right?).  Putting
:after auctex doesn't seem to be enough.

Current workaround: open a tex file to instantiate auctex-version
`elpaca-delete` the two packages
Install through elpaca-manager


*** Figure out if `eval-after-load` works with elpaca
2025-02-01 I think it does, it's just that it might not be called until the package is loaded after opening a file. Can't use it for initialization stuff/config?
it's that after-init hooks don't
** Minor projects
*** replace setq in config
`setq` seems like it should be replaced by either
`setopt` for global https://www.reddit.com/r/emacs/comments/178em7u/comment/k5077cy/?utm_source=share&utm_medium=web3x&utm_name=web3xcss&utm_term=1
`setq-local`

`setq` doesn't run setter functions associated with a variable
https://www.gnu.org/software/emacs/manual/html_node/elisp/Setting-Variables.html#index-setopt

nb: setopt shouldn't be used for programming, just init files because it's much less efficient

*** Update to use elpaca ':wait' recipe keyword
Replace most of the (elpaca-wait) commands scattered throughout with
`:wait` recipes in the relevant packages
** Package and Custom Settings TODOs
*** TODO visual-fill-column

- Change defaults in lisp file instead of customize
- enable global visual-fill-column
- figure out the correct column width and amount of extra space on the sides I want

*** TODO line number
 - fix the scroll issue with variable pitch fonts caused by when line number for the
   current line has more digits than the other line numbers on screen (it
   usually does because current line is absolute and others are relative)

*** TODO Auctex
   * [X]  Move customization from customs.el to lang-tex.el
   * [ ] see if anything from CDLaTeX is worth using and remap the keybinds to evil format

*** TODO Preview
Switch preview to use libsvgm for svg instead of png previews. See if that actually makes previews not look like ass.
In general: make previews not look like ass.


* Packages
** Currently Testing
*** denote
*** magit-todos
Collects TODO and other keywords in a project's files and displays them in magit's summary

*** latex-extra
https://github.com/Malabarba/latex-extra
Small QoL changes to fill-indent, tab folding, and navigation
*** eglot-tempel
https://github.com/fejfighter/eglot-tempel
*** sicp
Silly way to read Structure and Interpretation of Computer Programs

** Packages to watch for updates
*** Currently Bugged packages
**** terminal-here
- [ ] kitty issue with changing directory on mac / broader mac issues [[https://github.com/davidshepherd7/terminal-here/issues/45][Github
  Custom arguments and commands not working on macos  #45 ]]

**** nord-theme
Hasn't been updated for emacs 29+ https://github.com/nordtheme/emacs/pulls

(use-package nord-theme)
(use-package nordic-night-theme)

*** In development (e.g.features I want not ready)
** Packages to Test
*** arxiv-mode
Access arxiv in emacs.
Not sure if it has functionality I care about (easily download tex files)
*** benchmark-init
Benchmarking tools for emacs init and startup time
*** consult-eglot https://github.com/mohkale/consult-eglot

*** combobulate
https://github.com/mickeynp/combobulate
Structured editing and movement based on tree-sitter
```
Combobulate is a package that adds structured editing and movement to a wide
range of programming languages. Unlike most programming major modes that use
error-prone imperative code and regular expressions to determine what's what in
your code, Combobulate uses Emacs 29's tree-sitter library. Tree-sitter
maintains a concrete syntax tree of your code; it gives Combobulate absolute
clarity of all aspects of your code, enabling more correct movement and editing
than you would otherwise have.
```
*** dape https://github.com/svaante/dape
Debug adapter protocol. Like language server protocol for debugging.
**** R debugger https://github.com/ManuelHentschel/VSCode-R-Debugger
*** crux
Bunch of utility functions for emacs quality of life stuff
*** eglot-tempel
Use tempel instead of yasnippet with eglot
*** evil-tex https://github.com/iyefrat/evil-tex
*** evil-textobj-tree-sitter
https://github.com/meain/evil-textobj-tree-sitter
tree-sitter type movement with evil and text
*** indent-control
Interface that combine all the indentation variables from each major mode to one giant list.
*** mindstream
Simple efficient note taker that minimizes friction e.g. due to having to name a temp file
https://countvajhula.github.io/mindstream/
*** org-anki
Synch org notes and anki. Only does basic and cloze, but that's all I use.

*** projection
https://github.com/mohkale/projection
projectile like features on top of emacs built-in project.el
** Notes on packages that were tested, added, or removed
*** Added Packages
**** bicycle
Purpose: Cycle outline and code visibility. Can combine outline and hs modes.
Status: Added sometime before September 2024 (long before)
*** Removed Packages
**** desktop
Disabled because it doesn't always play nice with elpaca. It seems it'll resume
and load packages associated with the current buffer before the elpaca init
runs.
**** fold-dwim-org
Disabled for many months, name is illustrative but don't recall using it.
**** org-contrib

* Snippets
** Jinx
https://github.com/tshu-w/.emacs.d/blob/7de113f9f05523f4abeda8c83f2dabe2f21cb6b2/lisp/editor-misc.el#L239
#+begin_src elisp
(use-package jinx
  :straight t
  :hook (text-mode . jinx-mode)
  :config
  (add-to-list 'jinx-exclude-regexps '(t "\\cc"))
  (with-eval-after-load 'vertico-multiform
    (add-to-list 'vertico-multiform-categories '(jinx grid (vertico-grid-annotate . 20))))
  (with-eval-after-load 'evil
    (evil-define-motion evil-prev-jinx-error (count)
      "Go to the COUNT'th spelling mistake preceding point."
      :jump t (jinx-previous (or count 1)))
    (evil-define-motion evil-next-jinx-error (count)
      "Go to the COUNT'th spelling mistake after point."
      :jump t (jinx-next (or count 1))))
  :general
  ([remap ispell-word] 'jinx-correct-word
   [remap evil-prev-flyspell-error] 'evil-prev-jinx-error
   [remap evil-next-flyspell-error] 'evil-next-jinx-error))
#+end_src
