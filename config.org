#+title: John's Emacs Configuration
#+subtitle: And scattered esoterica to help my future self
#+author: John Sperger
#+language: en
#+options: toc:2
# macros taken from prot's config https://git.sr.ht/~protesilaos/dotfiles
#+startup: overview
#+macro: latest-export-date (eval (format-time-string "%F %T %z"))
#+macro: word-count (eval (count-words (point-min) (point-max)))

*Last revised and exported on {{{latest-export-date}}} with a word
count of {{{word-count}}}.*

* Overview

This file documents and generates my Emacs configuration. It tangles to create
my configuration files; this is distinct from the kind of literate config that
uses the org file as the config file.

** Style

Headings in the sections containing configuration code are functional as well as
organizational. 
#+name: Heading structure
| Level    | Usage          | Meaning       |
|----------+----------------+---------------|
| H1 ~*~     | Organizational |               |
| H2 ~**~    |                |               |
| H3 ~***~   | Functional     | distinct file |
| H4 ~****~  | Functional     | time stamping |
| H5 ~*****~ | Functional     |               |
|          |                |               |

** Design Decisions & Notable Features
*** Support for detangling

The header option =:comments link= encases the code in the tangled file with a comment linking back to the org source block. This enables detangling, making changes in the tangled file and propagating them back to the org source block.
Not sure if this will be a good idea or if it's just an invitation for the config to get out of sync. 
*** Aggressive time-stamping
The combination of scavenging snippets from a multitude of dotfiles, tending
towards maximalism in package usage, Emacs's long history and ongoing
development, and starting to configure Emacs before I had any idea what I was
doing combine to make certain configuration options obsolete over time.

You'll encounter snippets that have been passed around since time immemorial
and .
The garbage collector trick is a notable one that still seems to have utility.
Other snippets 


** Warnings
*** I have no idea what I'm doing
*** I don't care about startup time (or at least don't optimize for it)
This config is meant to be used with Emacs running as a daemon. When I want to
open Emacs I'm really calling ~emacsclient~ with an option to create a new frame.
When I "quit" emacs I just delete the current frame. The initialization is far
from optimized because I only have to wait for it if I'm debugging some part of
my configuration. 

I'm sympathetic to the arguments in this blog post that [[https://batsov.com/articles/2025/04/07/emacs-startup-time-does-not-matter/][start-up time doesn't matter]] (to me). 

* Notes on configuring Emacs
** Things I found or continue to find particularly confusing
*** Package management and loading packages
related: 
*** The "right" way to configure package options
* Configuration
*** init.el
:PROPERTIES:
:header-args: :tangle init.el
:CUSTOM_ID: configuration
:END:

:TODO: Figure out a way to abide by the emacs styling where the first line is like ~;;; init.el --- Summary -*- lexical-binding: t; -*-~

while still having tangle/detangle functionality. Shouldn't be too difficult honestly because the first line can be inferred from the filename

#+name: header-init
#+begin_src emacs-lisp :tangle init.el
;;; init.el --- Initialize configuration -*- lexical-binding: t; -*-
;;; Commentary:
;;; Code:
#+end_src

#+name: init
#+begin_src emacs-lisp :noweb yes :comments link :tangle init.el 
	;; ===================== Elpaca bootstrap install ====================
	;; https://github.com/progfolio/elpaca?tab=readme-ov-file#installer
	(defvar elpaca-installer-version 0.11)
	(defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
	(defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
	(defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
	(defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
																:ref nil :depth 1 :inherit ignore
																:files (:defaults "elpaca-test.el" (:exclude "extensions"))
																:build (:not elpaca--activate-package)))
	(let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
				 (build (expand-file-name "elpaca/" elpaca-builds-directory))
				 (order (cdr elpaca-order))
				 (default-directory repo))
		(add-to-list 'load-path (if (file-exists-p build) build repo))
		(unless (file-exists-p repo)
			(make-directory repo t)
			(when (<= emacs-major-version 28) (require 'subr-x))
			(condition-case-unless-debug err
					(if-let* ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
										((zerop (apply #'call-process `("git" nil ,buffer t "clone"
																										,@(when-let* ((depth (plist-get order :depth)))
																												(list (format "--depth=%d" depth) "--no-single-branch"))
																										,(plist-get order :repo) ,repo))))
										((zerop (call-process "git" nil buffer t "checkout"
																					(or (plist-get order :ref) "--"))))
										(emacs (concat invocation-directory invocation-name))
										((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
																					"--eval" "(byte-recompile-directory \".\" 0 'force)")))
										((require 'elpaca))
										((elpaca-generate-autoloads "elpaca" repo)))
							(progn (message "%s" (buffer-string)) (kill-buffer buffer))
						(error "%s" (with-current-buffer buffer (buffer-string))))
				((error) (warn "%s" err) (delete-directory repo 'recursive))))
		(unless (require 'elpaca-autoloads nil t)
			(require 'elpaca)
			(elpaca-generate-autoloads "elpaca" repo)
			(let ((load-source-file-function nil)) (load "./elpaca-autoloads"))))
	(add-hook 'after-init-hook #'elpaca-process-queues)
	(elpaca `(,@elpaca-order))
	;; ======================== END: elpaca bootstrap ========================

	(elpaca elpaca-use-package
		;; Enable :elpaca use-package keyword.
		(elpaca-use-package-mode)
		;; Assume :elpaca t unless otherwise specified.
		(setq elpaca-use-package-by-default t)
		)

	(elpaca-wait) ; Block until current queue processed.

	;; ============== Define constants for use throughout config =============

	(defconst IS-MAC (eq system-type 'darwin))
	(defconst IS-LINUX (memq system-type '(gnu gnu/linux gnu/kfreebsd berkeley-unix)))
	(defconst IS-WINDOWS (memq system-type '(cygwin windows-nt ms-dos)))

	(defconst my-debug-mode nil
		"Toggle debugging messages. Set to t to enable, nil to disable.")
#+end_src
**** no-littering
Emacs packages 
#+name: no-littering
#+begin_src emacs-lisp :noweb yes :comments link :tangle init.el 
;; ============== Packages that change core functionality =============

(use-package no-littering :ensure (:wait t))
#+end_src

**** Load configuration files

#+name: load configuration files
#+begin_src emacs-lisp :noweb yes :comments link :tangle init.el 
	;; ============================== Load path ==============================
	;; optimize: force "lisp"" and "site-lisp" at the head to reduce the startup time.

	(dolist (dir '("lisp"))
		(push (expand-file-name dir user-emacs-directory) load-path))

	(require 'core-keybinds)
	(require 'editor-completion)

	(require 'evil-core)
	(require 'evil-addons)

	(require 'builtin-packages)
	(require 'core-config)
	(require 'core-funcs)
	(require 'core-packages)
	(require 'core-treesit)

	(require 'completion-actions)
	(require 'completion-backends)
	(require 'completion-display)
	(require 'completion-movement)
	(require 'completion-snippets)

	(require 'editor-icons)
	(require 'editor-fonts)
	(require 'editor-font-locking)
	(require 'editor-themes)
	(require 'editor-misc)
	(require 'editor-projects)
	(require 'editor-ui)
	(require 'editor-vc)

	(require 'tools-denote)
	(require 'tools-diagramming)
	(require 'tools-llm)
	(require 'tools-media)
	(require 'tools-notes)
	(require 'tools-programming)
	(require 'tools-reading)
	(require 'tools-search)
	(require 'tools-web)
	(require 'tools-writing)

	(require 'lang-bib)
	(require 'lang-data-formats)
	(require 'lang-lisp)
	(require 'lang-markdown)
	(require 'lang-org)
	(require 'lang-python)
	(require 'lang-r)
	(require 'lang-rust)
	(require 'lang-tex)
	(require 'lang-web)
	(require 'lang-functions)

	(require 'tools-lsp-bridge)
	(require 'tools-org-capture)
	;; (require 'tools-eaf)

	;; ====================== After-init hooks + custom ======================
	(setq custom-file (expand-file-name "customs.el" user-emacs-directory))
	(add-hook 'elpaca-after-init-hook (lambda () (load custom-file 'noerror)))


	;; Local Variables:
	;; no-byte-compile: t
	;; no-native-compile: t
	;; no-update-autoloads: t
	;; End:
#+end_src

#+name: footer-init
#+begin_src emacs-lisp
(provide 'init)
;;; init.el ends here
#+end_src

